generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  accounts        Account[]
  recommendations Recommendation[] @relation("UserRecommendations")
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Album {
  id                           String           @id @default(cuid())
  discogsId                    String           @unique
  title                        String
  artist                       String
  releaseDate                  String?
  genre                        String[]
  label                        String?
  imageUrl                     String?
  createdAt                    DateTime         @default(now())
  updatedAt                    DateTime         @updatedAt
  basisForRecommendations      Recommendation[] @relation("BasisAlbum")
  recommendedInRecommendations Recommendation[] @relation("RecommendedAlbum")
  tracks                       Track[]

  @@index([discogsId])
  @@index([artist, title])
}

model Track {
  id          String @id @default(cuid())
  title       String
  duration    Int?
  trackNumber Int
  albumId     String
  album       Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@index([albumId])
}

model Recommendation {
  id                 String   @id @default(cuid())
  score              Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String
  basisAlbumId       String
  recommendedAlbumId String
  basisAlbum         Album    @relation("BasisAlbum", fields: [basisAlbumId], references: [id])
  recommendedAlbum   Album    @relation("RecommendedAlbum", fields: [recommendedAlbumId], references: [id])
  user               User     @relation("UserRecommendations", fields: [userId], references: [id])

  @@index([userId])
  @@index([basisAlbumId])
  @@index([recommendedAlbumId])
}
