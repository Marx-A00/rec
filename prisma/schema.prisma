generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  
  // Essential profile fields
  bio             String?          @db.Text
  
  // Social statistics for music recommendations
  followersCount  Int              @default(0)
  followingCount  Int              @default(0)
  recommendationsCount Int          @default(0)
  
  // Profile timestamp
  profileUpdatedAt DateTime?
  
  // Existing relations
  accounts        Account[]
  recommendations Recommendation[]
  sessions        Session[]
  collections     Collection[]
  
  // Social features - following relationships
  following       UserFollow[]     @relation("UserFollowing")
  followers       UserFollow[]     @relation("UserFollowers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recommendation {
  id        String   @id @default(cuid())
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  
  // Discogs references (source of truth)
  basisAlbumDiscogsId       String
  recommendedAlbumDiscogsId String
  
  // Cached display data (to avoid API calls in lists)
  basisAlbumTitle           String
  basisAlbumArtist          String
  basisAlbumImageUrl        String?
  basisAlbumYear            String?
  recommendedAlbumTitle     String
  recommendedAlbumArtist    String
  recommendedAlbumImageUrl  String?
  recommendedAlbumYear      String?
  
  user User @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([basisAlbumDiscogsId])
  @@index([recommendedAlbumDiscogsId])
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  albums      CollectionAlbum[]
  
  @@index([userId])
  @@index([isPublic])
  @@index([userId, updatedAt])  // Optimize user collections ordered by update time
}

model CollectionAlbum {
  id             String     @id @default(cuid())
  collectionId   String
  albumDiscogsId String     // Changed to store Discogs ID directly
  personalRating Int?
  personalNotes  String?
  position       Int        @default(0)
  addedAt        DateTime   @default(now())
  
  // Cached display data
  albumTitle     String
  albumArtist    String
  albumImageUrl  String?
  albumYear      String?
  
  collection     Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  
  @@unique([collectionId, albumDiscogsId])
  @@index([collectionId])
  @@index([albumDiscogsId])
  @@index([collectionId, position])  // Optimize ordered album retrieval
}

// User follow relationships
model UserFollow {
  id          String   @id @default(cuid())
  followerId  String
  followedId  String
  createdAt   DateTime @default(now())
  
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followed    User     @relation("UserFollowers", fields: [followedId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followedId])
  @@index([followerId])
  @@index([followedId])
}
