// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  recommendations Recommendation[] @relation("UserRecommendations")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model Album {
  id          String    @id @default(cuid())
  discogsId   String    @unique
  title       String
  artist      String
  releaseDate String?
  genre       String[]
  label       String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tracks      Track[]
  basisForRecommendations    Recommendation[] @relation("BasisAlbum")
  recommendedInRecommendations Recommendation[] @relation("RecommendedAlbum")

  @@index([discogsId])
  @@index([artist, title])
}

model Track {
  id          String  @id @default(cuid())
  title       String
  duration    Int?    // Duration in seconds
  trackNumber Int
  album       Album   @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId     String

  @@index([albumId])
}

model Recommendation {
  id                String  @id @default(cuid())
  score             Int     // Score from 1-10
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User    @relation("UserRecommendations", fields: [userId], references: [id])
  userId            String
  basisAlbum        Album   @relation("BasisAlbum", fields: [basisAlbumId], references: [id])
  basisAlbumId      String
  recommendedAlbum  Album   @relation("RecommendedAlbum", fields: [recommendedAlbumId], references: [id])
  recommendedAlbumId String

  @@index([userId])
  @@index([basisAlbumId])
  @@index([recommendedAlbumId])
}
